# ===========================
Rcpp::compileAttributes("/home/konrad/Literatur_ParameterEstimation/PackageNr3dot1", verbose = T)
install.packages("/home/konrad/Literatur_ParameterEstimation/PackageNr3dot1", repos = NULL, type = "source",
verbose = T)
# ===========================
# Run Model Nr.2
# ===========================
library(PackageNr3dot1)
v <- c( 0.,2.,4., 6., 8., 10., 12., 14., 16., 18., 20., 22., 24.)
Rcpp::sourceCpp('/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR//Model2/odeModel2.cpp')
interface_function(v, test_input_ode, 1e-6, c(1e-6, 1e-6, 1e-6,1e-6,1e-6,1e-6),
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/start.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/lb.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/ub.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/states.txt",
npop = 4, ngen = 20, error = 1,
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_run1_20200505.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_parameter_run1_20200505.txt")
set.seed(1)
interface_function(v, test_input_ode, 1e-6, c(1e-6, 1e-6, 1e-6,1e-6,1e-6,1e-6),
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/start.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/lb.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/ub.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/states.txt",
npop = 4, ngen = 20, error = 1,
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_run1_20200505.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_parameter_run1_20200505.txt")
# Package installation
# ===========================
Rcpp::compileAttributes("/home/konrad/Literatur_ParameterEstimation/PackageNr3dot1", verbose = T)
install.packages("/home/konrad/Literatur_ParameterEstimation/PackageNr3dot1", repos = NULL, type = "source",
verbose = T)
# ===========================
# Run Model Nr.2
# ===========================
library(PackageNr3dot1)
v <- c( 0.,2.,4., 6., 8., 10., 12., 14., 16., 18., 20., 22., 24.)
Rcpp::sourceCpp('/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR//Model2/odeModel2.cpp')
interface_function(v, test_input_ode, 1e-6, c(1e-6, 1e-6, 1e-6,1e-6,1e-6,1e-6),
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/start.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/lb.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/ub.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/states.txt",
npop = 4, ngen = 20, error = 1,
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_run1_20200505.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_parameter_run1_20200505.txt")
set.seed(1)
interface_function(v, test_input_ode, 1e-6, c(1e-6, 1e-6, 1e-6,1e-6,1e-6,1e-6),
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/start.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/lb.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/ub.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/states.txt",
npop = 4, ngen = 20, error = 1,
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_run1_20200505.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_parameter_run1_20200505.txt")
# Package installation
# ===========================
Rcpp::compileAttributes("/home/konrad/Literatur_ParameterEstimation/PackageNr3dot1", verbose = T)
install.packages("/home/konrad/Literatur_ParameterEstimation/PackageNr3dot1", repos = NULL, type = "source",
verbose = T)
# ===========================
# Run Model Nr.2
# ===========================
library(PackageNr3dot1)
v <- c( 0.,2.,4., 6., 8., 10., 12., 14., 16., 18., 20., 22., 24.)
Rcpp::sourceCpp('/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR//Model2/odeModel2.cpp')
set.seed(1)
interface_function(v, test_input_ode, 1e-6, c(1e-6, 1e-6, 1e-6,1e-6,1e-6,1e-6),
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/start.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/lb.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/ub.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/states.txt",
npop = 4, ngen = 20, error = 1,
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_run1_20200505.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_parameter_run1_20200505.txt")
interface_function(v, test_input_ode, 1e-6, c(1e-6, 1e-6, 1e-6,1e-6,1e-6,1e-6),
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/start.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/lb.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/ub.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/states.txt",
npop = 4, ngen = 20, error = 1,
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_run1_20200505.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_parameter_run1_20200505.txt")
set.seed(10)
interface_function(v, test_input_ode, 1e-6, c(1e-6, 1e-6, 1e-6,1e-6,1e-6,1e-6),
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/start.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/lb.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/ub.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/states.txt",
npop = 4, ngen = 20, error = 1,
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_run1_20200505.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_parameter_run1_20200505.txt")
install.packages("/home/konrad/Literatur_ParameterEstimation/anRpackage",
repos = NULL,
type = "source")
anRpackage::interface()
Rcpp::compileAttributes("/home/konrad/Literatur_ParameterEstimation/anRpackage", verbose = T)
install.packages("/home/konrad/Literatur_ParameterEstimation/anRpackage",
repos = NULL,
type = "source")
anRpackage::interface()
install.packages("/home/konrad/Literatur_ParameterEstimation/anRpackage",
repos = NULL,
type = "source")
anRpackage::interface()
anRpackage::interface()
anRpackage::interface()
anRpackage::interface()
anRpackage::interface()
anRpackage::interface()
anRpackage::interface()
anRpackage::interface()
anRpackage::interface()
anRpackage::interface()
anRpackage::interface()
# Package installation
# ===========================
Rcpp::compileAttributes("/home/konrad/Literatur_ParameterEstimation/PackageNr3dot1", verbose = T)
install.packages("/home/konrad/Literatur_ParameterEstimation/PackageNr3dot1", repos = NULL, type = "source",
verbose = T)
# ===========================
# Run Model Nr.2
# ===========================
library(PackageNr3dot1)
v <- c( 0.,2.,4., 6., 8., 10., 12., 14., 16., 18., 20., 22., 24.)
Rcpp::sourceCpp('/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR//Model2/odeModel2.cpp')
interface_function(v, test_input_ode, 1e-6, c(1e-6, 1e-6, 1e-6,1e-6,1e-6,1e-6),
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/start.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/lb.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/ub.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/states.txt",
npop = 4, ngen = 20, error = 1,
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_run1_20200505.txt",
"/home/konrad/Literatur_ParameterEstimation/Modelle_basierend_aufLisas_Daten_inR/Model2/output_parameter_run1_20200505.txt")
library(Rcpp)
library(testthat)
library(ParOpt)
getwd()
# Tests ============================================================================
path <- getwd()
df <- data.frame(time = seq(1,length(iris[,1]),1),iris[,1:4])
write.table(df, file = paste(path, "/test.txt", sep = ""),
quote = F, row.names = F)
test_that("check what happens when no file exist", {
expect_error(test_no_file_exist(paste(path, "/test2.txt", sep = "")),
"ERROR: No File")
})
test_that("check dimensions of input file", {
expect_equal(test_count_cols_rows(paste(path, "/test.txt", sep = "")), c(151,5))
})
df_list <- list(df[,1], df[,2], df[,3], df[,4], df[,5])
test_that("check output of get_content", {
expect_equal(test_get_content(paste(path, "/test.txt", sep = "")), df_list)
})
library(ParOpt2)
system.file("test.txt", package = "ParOpt2")
system.file("tests/testthat/files", package = "ParOpt2")
library(testthat)
library(ParOpt2)
path <- system.file("tests/testthat/files", package = "ParOpt2")
path
test_that("check dimensions of input file", {
expect_equal(test_count_cols_rows(paste(path, "/test.txt", sep = "")), c(151,5))
})
library(testthat)
library(ParOpt2)
path <- system.file("tests/testthat/files", package = "ParOpt2")
path
test_that("check dimensions of input file", {
expect_equal(test_count_cols_rows(paste(path, "/test.txt", sep = "")), c(151,5))
})
ParOpt2::test_count_cols_rows()
ParOpt2:::test_count_cols_rows()
test_that("check dimensions of input file", {
expect_equal(ParOpt2:::test_count_cols_rows(paste(path, "/test.txt", sep = "")), c(151,5))
})
ParOpt2:::test_count_cols_rows(paste(path, "/test.txt", sep = ""))
test_package("ParOpt2")
?test_package
path <- system.file("tests/testthat/files", package = "ParOpt2")
path
test_dir(path)
path2 <- system.file("tests", package = "ParOpt2")
test_dir(path)
path2
test_package("ParOpt2")
?test_fil
?test_file
test_file(path)
test_package("ParOpt2", reporter = summary())
test_package("ParOpt2", reporter = summary)
test_package("ParOpt2")#, reporter = summary)
test_file(path)
test_file(path, reporter = summary)
test_file(path, reporter = "summary")
out <- test_file(path, reporter = "summary")
out
path2
out <- test_file(path2, reporter = "summary")
out
path2
out <- test_file(paste(path2, "tests.R", sep = ""), reporter = "summary")
path2 <- system.file("tests", package = "ParOpt2")
out <- test_file(paste(path2, "tests.R", sep = ""), reporter = "summary")
paste(path2, "tests.R", sep = "")
out <- test_file(paste(path2, "/tests.R", sep = ""), reporter = "summary")
library(testthat)
library(ParOpt2)
test_package("ParOpt2")
path2
path2 <- system.file("tests", package = "ParOpt2")
path2
out <- test_file(paste(path2, "/tests.R", sep = ""), reporter = "summary")
out
ParOpt2:::test_count_cols_rows(paste(path, "/test.txt", sep = ""))
ParOpt2:::test_count_cols_rows(paste(path2, "/test.txt", sep = ""))
library(testthat)
library(ParOpt2)
test_package("ParOpt2")
path2 <- system.file("tests", package = "ParOpt2")
path2
out <- test_file(paste(path2, "/tests.R", sep = ""), reporter = "summary")
out
ParOpt2:::test_count_cols_rows(paste(path, "/test.txt", sep = ""))
ParOpt2:::test_count_cols_rows(paste(path2, "/test.txt", sep = ""))
paste/path2, "/test.txt", sep = "")
paste(path2, "/test.txt", sep = "")
path
path <- system.file("tests/testthat/files", package = "ParOpt2")
path
df <- read.table(paste(path, "/test.txt", header = T))
df <- read.table(paste(path, "/test.txt", sep = ""), header = T))
df <- read.table(paste(path, "/test.txt", sep = ""), header = T)
df
#
df_with_NA <- df
df_with_NA[1,1] <- NA
df_with_NA[10, 2] <- NA
write.table(df_with_NA, file = paste("/home/konrad/Uni/ParOptSof/SoftwareInR", "/test_with_NA.txt", sep = ""),
quote = F, row.names = F)
library(testthat)
library(ParOpt2)
path2 <- system.file("tests", package = "ParOpt2")
path2
out <- test_file(paste(path2, "/tests.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/test_import.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/test_interface.R", sep = ""), reporter = "summary")
out
library(testthat)
library(ParOpt2)
path2 <- system.file("tests", package = "ParOpt2")
out <- test_file(paste(path2, "/tests.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/test_import.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/test_interface.R", sep = ""), reporter = "summary")
out
# # Test Solver =======================================================
Rcpp::cppFunction('Rcpp::NumericVector ode(double t, std::vector<double> params, Rcpp::NumericVector y) {
Rcpp::NumericVector ydot(y.length());
double a = params[0];
double b = params[1];
double c = params[2];
double d = params[3];
double n1 = y[0];
double n2 = y[1];
ydot[0] = n1*c*n2 - n1*d;
ydot[1] = n2*a - n2*b*n1;
return ydot;
}')
n1 <- 10
n2 <- 10
a <- 1.1
b <- 0.4
c <- 0.1
d <- 0.4
parms <- c(a = a, b = b, c = c, d = d)
t <- seq(0, 100, pi/2)
start <- c(n1 = n1, n2 = n2)
library(deSolve)
LV <- function(t, x, parms) {
with(as.list(c(parms, x)), {
dn1 <- n1*c*n2 - n1*d
dn2 <- n2*a - n2*b*n1
res <- c(dn1, dn2)
list(res)
})
}
out <-  lsoda(start, t, LV, parms, rtol = 1e-6, atol = c(1e-8, 1e-8))
correct <- list(out[,2], out[,3])
correct
path
path <- system.file("tests/testthat/files", package = "ParOpt2")
path
out
write.table(out, "/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2/outputdeSolve.txt", header = T, quote = F,
row.names = F)
out <-  lsoda(start, t, LV, parms, rtol = 1e-6, atol = c(1e-8, 1e-8))
write.table(out, "/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2/outputdeSolve.txt", header = T, quote = F,
row.names = F)
write.table(out, "/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2/outputdeSolve.txt", quote = F,
row.names = F)
library(testthat)
library(ParOpt2)
path2 <- system.file("tests", package = "ParOpt2")
out <- test_file(paste(path2, "/tests.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/test_import.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/test_interface.R", sep = ""), reporter = "summary")
out
out <- testSolver(paste(path2, "/test_interface.R", sep = ""), reporter = "summary")
out <- test_file(paste(path2, "/testSolver.R", sep = ""), reporter = "summary")
out
library(testthat)
library(ParOpt2)
path2 <- system.file("tests", package = "ParOpt2")
out <- test_file(paste(path2, "/tests.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/test_import.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/test_interface.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/testSolver.R", sep = ""), reporter = "summary")
library(testthat)
library(ParOpt2)
path2 <- system.file("tests", package = "ParOpt2")
out <- test_file(paste(path2, "/tests.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/testSolver.R", sep = ""), reporter = "summary")
out
df <- data.frame(time = seq(0,10,1), a = runif(11), b = runif(11))
getwd()
write.table(df, file = paste(path, "/par_spline.txt", sep = ""),
quote = F, row.names = F)
path <- system.file("tests/testthat/files", package = "ParOpt2")
path
path <- getwd()
path
write.table(df, file = paste(path, "/par_spline.txt", sep = ""),
quote = F, row.names = F)
lb <- df
ub <- df
lb[,2:3] <- lb[,2:3] - 1
ub[,2:3] <- ub[,2:3] + 1
write.table(lb, file = paste(path, "/lb_spline.txt", sep = ""),
quote = F, row.names = F)
write.table(ub, file = paste(path, "/ub_spline.txt", sep = ""),
quote = F, row.names = F)
df
seq(0,10,0.25)
?spline
library(testthat)
library(ParOpt2)
path2 <- system.file("tests", package = "ParOpt2")
out <- test_file(paste(path2, "/tests.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/testSolver.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/testspline.R", sep = ""), reporter = "summary")
out
out <- ParOpt2:::test_paramsort_and_spline(seq(0, 10, 1), paste(path, "/par_spline.txt", sep = ""),
paste(path, "/lb_spline.txt", sep = ""), paste(path, "/ub_spline.txt", sep = ""))
path <- system.file("tests/testthat/files", package = "ParOpt2")
out <- ParOpt2:::test_paramsort_and_spline(seq(0, 10, 1), paste(path, "/par_spline.txt", sep = ""),
paste(path, "/lb_spline.txt", sep = ""), paste(path, "/ub_spline.txt", sep = ""))
out
out <- do.call(rbind, out)
out
df2 <- cbind(df[,2], df[,3])
df2 <- cbind(df[,2], df[,3])
df <- data.frame(time = seq(0,10,1), a = runif(11), b = runif(11))
lb <- df
ub <- df
lb[,2:3] <- lb[,2:3] - 1
ub[,2:3] <- ub[,2:3] + 1
df2 <- cbind(df[,2], df[,3])
df2
out
df <- read.table(paste(path, "/par_spline.txt", sep = ""), header = T)
df
lb <- df
ub <- df
lb[,2:3] <- lb[,2:3] - 1
ub[,2:3] <- ub[,2:3] + 1
out <- ParOpt2:::test_paramsort_and_spline(seq(0, 10, 1), paste(path, "/par_spline.txt", sep = ""),
paste(path, "/lb_spline.txt", sep = ""), paste(path, "/ub_spline.txt", sep = ""))
out <- do.call(rbind, out)
df2 <- cbind(df[,2], df[,3])
test_that("check ode solving", {
expect_equal(out, df2)
})
out <- ParOpt2:::test_paramsort_and_spline(seq(0, 10, 0.25), paste(path, "/par_spline.txt", sep = ""),
paste(path, "/lb_spline.txt", sep = ""), paste(path, "/ub_spline.txt", sep = ""))
out <- do.call(rbind, out)
df3a <- spline(seq(0,10,1), df$a, xout = seq(0,10, 0.25))
df3b <- spline(seq(0,10,1), df$b, xout = seq(0,10, 0.25))
df3 <- cbind(df3a$y, df3b$y)
test_that("check ode solving", {
expect_equal(out, df3)
})
out
plot(seq(0,10, 0.25), out[,1])
points(df$time, df$a, pch = 19)
points(seq(0,10,0.25), df3[,1], pch = 19)
plot(seq(0,10, 0.25), out[,2])
points(seq(0,10,0.25), df3[,2], pch = 19)
1/100
library(testthat)
library(ParOpt2)
out <- test_file(paste(path2, "/testspline.R", sep = ""), reporter = "summary")
path2 <- system.file("tests", package = "ParOpt2")
out <- test_file(paste(path2, "/testspline.R", sep = ""), reporter = "summary")
out
library(testthat)
library(ParOpt2)
out <- test_file(paste(path2, "/testspline.R", sep = ""), reporter = "summary")
path2 <- system.file("tests", package = "ParOpt2")
out <- test_file(paste(path2, "/testspline.R", sep = ""), reporter = "summary")
out
out <- test_file(paste(path2, "/tests.R", sep = ""), reporter = "summary")
out
?test_file
library(testthat)
library(ParOpt2)
path2 <- system.file("tests", package = "ParOpt2")
for(i in 1:100) {out <- test_file(paste(path2, "/testspline.R", sep = ""), reporter = "summary")}
path2
path <- "/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2/inst/tests/testthat/files"
path <- "/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2/inst/tests/testthat/files"
df <- read.table(paste(path, "/par_spline.txt", sep = ""), header = T)
df
out <- ParOpt2:::test_paramsort_and_spline(seq(0, 10, 1), paste(path, "/par_spline.txt", sep = ""),
paste(path, "/lb_spline.txt", sep = ""), paste(path, "/ub_spline.txt", sep = ""))
out
out <- do.call(rbind, out)
out
df2 <- cbind(df[,2], df[,3])
test_that("check ode solving", {
expect_equal(out, df2)
})
out <- ParOpt2:::test_paramsort_and_spline(seq(0, 10, 1), paste(path, "/par_spline.txt", sep = ""),
paste(path, "/lb_spline.txt", sep = ""), paste(path, "/ub_spline.txt", sep = ""))
out <- do.call(rbind, out)
df2 <- cbind(df[,2], df[,3])
test_that("check ode solving", {
expect_equal(out, df2)
})
path <- "/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2/inst/tests/testthat/files"
df <- read.table(paste(path, "/par_spline.txt", sep = ""), header = T)
out <- ParOpt2:::test_paramsort_and_spline(seq(0, 10, 1), paste(path, "/par_spline.txt", sep = ""),
paste(path, "/lb_spline.txt", sep = ""), paste(path, "/ub_spline.txt", sep = ""))
out <- do.call(rbind, out)
df2 <- cbind(df[,2], df[,3])
test_that("check ode solving", {
expect_equal(out, df2)
})
path <- "/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2/inst/tests/testthat/files"
df <- read.table(paste(path, "/par_spline.txt", sep = ""), header = T)
out <- ParOpt2:::test_paramsort_and_spline(seq(0, 10, 1), paste(path, "/par_spline.txt", sep = ""),
paste(path, "/lb_spline.txt", sep = ""), paste(path, "/ub_spline.txt", sep = ""))
out <- do.call(rbind, out)
df2 <- cbind(df[,2], df[,3])
test_that("check ode solving", {
expect_equal(out, df2)
})
for(i in 1:200) {
path <- "/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2/inst/tests/testthat/files"
df <- read.table(paste(path, "/par_spline.txt", sep = ""), header = T)
out <- ParOpt2:::test_paramsort_and_spline(seq(0, 10, 1), paste(path, "/par_spline.txt", sep = ""),
paste(path, "/lb_spline.txt", sep = ""), paste(path, "/ub_spline.txt", sep = ""))
out <- do.call(rbind, out)
df2 <- cbind(df[,2], df[,3])
test_that("check ode solving", {
expect_equal(out, df2)
})
}
for(i in 1:200) {
print(i)
path <- "/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2/inst/tests/testthat/files"
df <- read.table(paste(path, "/par_spline.txt", sep = ""), header = T)
out <- ParOpt2:::test_paramsort_and_spline(seq(0, 10, 1), paste(path, "/par_spline.txt", sep = ""),
paste(path, "/lb_spline.txt", sep = ""), paste(path, "/ub_spline.txt", sep = ""))
out <- do.call(rbind, out)
df2 <- cbind(df[,2], df[,3])
test_that("check ode solving", {
expect_equal(out, df2)
})
}
out
length(seq(0,10,2))
path <- system.file("examples", package = "ParOpt2")
path
path <- system.file("examples/", package = "ParOpt2")
paht
path
path <- system.file("/examples", package = "ParOpt2")
path
path <- system.file("inst/examples", package = "ParOpt2")
path
library(Rcpp)
setwd("/home/konrad/Uni/ParOptSof/SoftwareInR")
Rcpp::compileAttributes("/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2")
install.packages("ParOpt2", repos = NULL, type = "source")
library(ParOpt2)
setwd("/home/konrad/Uni/ParOptSof/SoftwareInR/ParOpt2/inst/examples")
Rcpp::sourceCpp("ode.cpp")
path <- system.file("inst/examples", package = "ParOpt2")
path
path
